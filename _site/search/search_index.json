{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"README-repo/","text":"\ud83e\udd50 croissant-go A template repo for a Golang Project. Table of Contents - [\ud83e\udd50 croissant-go](#-croissant-go) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [Links](#links) - [Other Docs](#other-docs) - [History](#history) - [Alternatives](#alternatives) - [Development](#development) - [Setup](#setup) - [Tests](#tests) - [Build Troubleshooting](#build-troubleshooting) - [Contributing](#contributing) - [License](#license) Key Features Technical Overview Installation Getting Started Configuration Deployment Documentation and Additional Resources Links Other Docs History Alternatives Development Setup Tests Build Troubleshooting Contributing License","title":"Repo Readme"},{"location":"README-repo/#croissant-go","text":"A template repo for a Golang Project. Table of Contents - [\ud83e\udd50 croissant-go](#-croissant-go) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [Links](#links) - [Other Docs](#other-docs) - [History](#history) - [Alternatives](#alternatives) - [Development](#development) - [Setup](#setup) - [Tests](#tests) - [Build Troubleshooting](#build-troubleshooting) - [Contributing](#contributing) - [License](#license)","title":"\ud83e\udd50 croissant-go"},{"location":"README-repo/#key-features","text":"","title":"Key Features"},{"location":"README-repo/#technical-overview","text":"","title":"Technical Overview"},{"location":"README-repo/#installation","text":"","title":"Installation"},{"location":"README-repo/#getting-started","text":"","title":"Getting Started"},{"location":"README-repo/#configuration","text":"","title":"Configuration"},{"location":"README-repo/#deployment","text":"","title":"Deployment"},{"location":"README-repo/#documentation-and-additional-resources","text":"","title":"Documentation and Additional Resources"},{"location":"README-repo/#links","text":"","title":"Links"},{"location":"README-repo/#other-docs","text":"","title":"Other Docs"},{"location":"README-repo/#history","text":"","title":"History"},{"location":"README-repo/#alternatives","text":"","title":"Alternatives"},{"location":"README-repo/#development","text":"","title":"Development"},{"location":"README-repo/#setup","text":"","title":"Setup"},{"location":"README-repo/#tests","text":"","title":"Tests"},{"location":"README-repo/#build-troubleshooting","text":"","title":"Build Troubleshooting"},{"location":"README-repo/#contributing","text":"","title":"Contributing"},{"location":"README-repo/#license","text":"","title":"License"},{"location":"cmd/croissant/","text":"croissant A cli for Croissant files Synopsis A simple cli for interacting with \ud83e\udd50 Croissant dataset files. Options --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for croissant -L, --loglevel string set zerolog log level (default \"info\") --profiledir string directory to write pprof profile data to SEE ALSO croissant version - Get version Auto generated by spf13/cobra on 5-Aug-2025","title":"root"},{"location":"cmd/croissant/#croissant","text":"A cli for Croissant files","title":"croissant"},{"location":"cmd/croissant/#synopsis","text":"A simple cli for interacting with \ud83e\udd50 Croissant dataset files.","title":"Synopsis"},{"location":"cmd/croissant/#options","text":"--color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for croissant -L, --loglevel string set zerolog log level (default \"info\") --profiledir string directory to write pprof profile data to","title":"Options"},{"location":"cmd/croissant/#see-also","text":"croissant version - Get version","title":"SEE ALSO"},{"location":"cmd/croissant/#auto-generated-by-spf13cobra-on-5-aug-2025","text":"","title":"Auto generated by spf13/cobra on 5-Aug-2025"},{"location":"cmd/croissant_version/","text":"croissant version Get version Synopsis Get the current version of tool croissant version [flags] Options -h, --help help for version Options inherited from parent commands --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -L, --loglevel string set zerolog log level (default \"info\") --profiledir string directory to write pprof profile data to SEE ALSO croissant - A cli for Croissant files Auto generated by spf13/cobra on 5-Aug-2025","title":"version"},{"location":"cmd/croissant_version/#croissant-version","text":"Get version","title":"croissant version"},{"location":"cmd/croissant_version/#synopsis","text":"Get the current version of tool croissant version [flags]","title":"Synopsis"},{"location":"cmd/croissant_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"cmd/croissant_version/#options-inherited-from-parent-commands","text":"--color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -L, --loglevel string set zerolog log level (default \"info\") --profiledir string directory to write pprof profile data to","title":"Options inherited from parent commands"},{"location":"cmd/croissant_version/#see-also","text":"croissant - A cli for Croissant files","title":"SEE ALSO"},{"location":"cmd/croissant_version/#auto-generated-by-spf13cobra-on-5-aug-2025","text":"","title":"Auto generated by spf13/cobra on 5-Aug-2025"},{"location":"godoc/croissant-cmd/","text":"cmd import \"github.com/b13rg/croissant-go/cmd\" Output package version info. Index Variables func Colorize(input interface{}, colorNum int, disabled bool) string func ConfigureLogger(debug bool) func Execute(ver string) func InitConfig() func ProfilingFinalizer() func ProfilingInitializer() func SetupLogger(enableColor bool) zerolog.Logger type CmdRootOptions type Stamp Variables RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"croissant\", Short: \"A cli for Croissant files\", Long: `A simple cli for interacting with \ud83e\udd50 Croissant dataset files.`, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Get version\", Long: `Get the current version of tool`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, } func Colorize func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function. func ConfigureLogger func ConfigureLogger(debug bool) func Execute func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd. func InitConfig func InitConfig() InitConfig reads in config file and ENV variables if set. func ProfilingFinalizer func ProfilingFinalizer() Stop profiling and write cpu and memory profiling files if configured. func ProfilingInitializer func ProfilingInitializer() Sets up program profiling. func SetupLogger func SetupLogger(enableColor bool) zerolog.Logger Configure zerolog with some defaults and cleanup error formatting. type CmdRootOptions Default options that are available to all commands. type CmdRootOptions struct { // log more information about what the tool is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // Profiling output directory. Only captured if set. ProfilingDir string // CPU profiling output file handle. ProfilingCPUFile *os.File } var RootConfig CmdRootOptions type Stamp type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"version"},{"location":"godoc/croissant-cmd/#cmd","text":"import \"github.com/b13rg/croissant-go/cmd\" Output package version info.","title":"cmd"},{"location":"godoc/croissant-cmd/#index","text":"Variables func Colorize(input interface{}, colorNum int, disabled bool) string func ConfigureLogger(debug bool) func Execute(ver string) func InitConfig() func ProfilingFinalizer() func ProfilingInitializer() func SetupLogger(enableColor bool) zerolog.Logger type CmdRootOptions type Stamp","title":"Index"},{"location":"godoc/croissant-cmd/#variables","text":"RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"croissant\", Short: \"A cli for Croissant files\", Long: `A simple cli for interacting with \ud83e\udd50 Croissant dataset files.`, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Get version\", Long: `Get the current version of tool`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, }","title":"Variables"},{"location":"godoc/croissant-cmd/#func-colorize","text":"func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function.","title":"func Colorize"},{"location":"godoc/croissant-cmd/#func-configurelogger","text":"func ConfigureLogger(debug bool)","title":"func ConfigureLogger"},{"location":"godoc/croissant-cmd/#func-execute","text":"func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd.","title":"func Execute"},{"location":"godoc/croissant-cmd/#func-initconfig","text":"func InitConfig() InitConfig reads in config file and ENV variables if set.","title":"func InitConfig"},{"location":"godoc/croissant-cmd/#func-profilingfinalizer","text":"func ProfilingFinalizer() Stop profiling and write cpu and memory profiling files if configured.","title":"func ProfilingFinalizer"},{"location":"godoc/croissant-cmd/#func-profilinginitializer","text":"func ProfilingInitializer() Sets up program profiling.","title":"func ProfilingInitializer"},{"location":"godoc/croissant-cmd/#func-setuplogger","text":"func SetupLogger(enableColor bool) zerolog.Logger Configure zerolog with some defaults and cleanup error formatting.","title":"func SetupLogger"},{"location":"godoc/croissant-cmd/#type-cmdrootoptions","text":"Default options that are available to all commands. type CmdRootOptions struct { // log more information about what the tool is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // Profiling output directory. Only captured if set. ProfilingDir string // CPU profiling output file handle. ProfilingCPUFile *os.File } var RootConfig CmdRootOptions","title":"type CmdRootOptions"},{"location":"godoc/croissant-cmd/#type-stamp","text":"type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"type Stamp"},{"location":"godoc/croissant-types/","text":"croissant import \"github.com/b13rg/croissant-go/pkg/croissant\" Croissant spec filetypes and relations. Index Variables type ContentExtractionEnumeration func NewContentExtractionEnumeration() *ContentExtractionEnumeration type DataSet func NewDataSet() *DataSet func NewFileSet() *DataSet type DataSource func NewDataSource() *DataSource type DataType func NewDataType() *DataType type Extract func NewExtract() *Extract type Field func NewField() *Field type FileObject func NewFileObject() *FileObject type FileResource func NewFileResource() *FileResource type FileSet type Format type JSON type RecordSet func NewRecordSet() *RecordSet type Source func NewSource() *Source type Split func NewSplit() *Split type Transform func NewTransform() *Transform Variables var SuggestedContext = map[string]interface{}{ \"@language\": \"en\", \"@vocab\": \"https://schema.org/\", \"sc\": \"https://schema.org/\", \"cr\": \"http://mlcommons.org/croissant/\", \"rai\": \"http://mlcommons.org/croissant/RAI/\", \"dct\": \"http://purl.org/dc/terms/\", \"citeAs\": \"cr:citeAs\", \"column\": \"cr:column\", \"conformsTo\": \"dct:conformsTo\", \"data\": map[string]interface{}{ \"@id\": \"cr:data\", \"@type\": \"@json\", }, \"dataType\": map[string]interface{}{ \"@id\": \"cr:dataType\", \"@type\": \"@vocab\", }, \"examples\": map[string]interface{}{ \"@id\": \"cr:examples\", \"@type\": \"@json\", }, \"extract\": \"cr:extract\", \"field\": \"cr:field\", \"fileProperty\": \"cr:fileProperty\", \"fileObject\": \"cr:fileObject\", \"fileSet\": \"cr:fileSet\", \"format\": \"cr:format\", \"includes\": \"cr:includes\", \"isLiveDataset\": \"cr:isLiveDataset\", \"jsonPath\": \"cr:jsonPath\", \"key\": \"cr:key\", \"md5\": \"cr:md5\", \"parentField\": \"cr:parentField\", \"path\": \"cr:path\", \"recordSet\": \"cr:recordSet\", \"references\": \"cr:references\", \"regex\": \"cr:regex\", \"repeated\": \"cr:repeated\", \"replace\": \"cr:replace\", \"separator\": \"cr:separator\", \"source\": \"cr:source\", \"subField\": \"cr:subField\", \"transform\": \"cr:transform\", } type ContentExtractionEnumeration type ContentExtractionEnumeration struct { FullPath string Filename string Content string Lines string LineNumbers string } func NewContentExtractionEnumeration func NewContentExtractionEnumeration() *ContentExtractionEnumeration type DataSet type DataSet struct { Context map[string]interface{} `json:\"@context\"` NType string `json:\"@type\"` ConformsTo string `json:\"dct:conformsTo\"` Description string `json:\"description\"` License []string `json:\"license\"` Name string `json:\"name\"` URL string `json:\"url\"` Creator []string `json:\"creator\"` DatePublished string `json:\"datePublished\"` Keywords []string `json:\"keywords,omitempty\"` Publisher []string `json:\"publisher,omitempty\"` Version string `json:\"version,omitempty\"` DateCreated string `json:\"dateCreated,omitempty\"` DateModified string `json:\"dateModified,omitempty\"` SameAs []string `json:\"sameAs,omitempty\"` SdLicense []string `json:\"sdLicense,omitempty\"` InLanguage []string `json:\"inLanguage,omitempty\"` Distribution []FileResource `json:\"distribution,omitempty\"` IsLiveDataset bool `json:\"isLiveDataset,omitempty\"` CiteAs string `json:\"citeAs,omitempty\"` } func NewDataSet func NewDataSet() *DataSet func NewFileSet func NewFileSet() *DataSet type DataSource type DataSource struct { NType string `json:\"@type\"` FileObject *FileObject `json:\"fileObject\"` FileSet *FileSet `json:\"fileSet\"` RecordSet *RecordSet `json:\"recordSet\"` Extract Extract `json:\"extract\"` Transform Transform `json:\"transform\"` Format Format `json:\"format\"` } func NewDataSource func NewDataSource() *DataSource type DataType type DataType struct { // MIME type DataType string } func NewDataType func NewDataType() *DataType type Extract type Extract struct { FileProperty ContentExtractionEnumeration Column string `json:\"column\"` JsonPath string `json:\"jsonPath\"` } func NewExtract func NewExtract() *Extract type Field type Field struct { NType string `json:\"@type\"` Source Source `json:\"source\"` DataType DataType `json:\"dataType\"` Repeated bool `json:\"repeated,omitempty\"` References []*Field `json:\"references,omitempty\"` SubField []*Field `json:\"subField,omitempty\"` ParentField []*Field `json:\"parentField,omitempty\"` EquivalentProperty string `json:\"equivalentProperty,omitempty\"` } func NewField func NewField() *Field type FileObject type FileObject struct { NType string `json:\"@type\"` Name string `json:\"sc:name\"` ContentURL string `json:\"sc:contentUrl\"` ContentSize string `json:\"sc:contentSize\"` EncodingFormat string `json:\"sc:encodingFormat\"` Sha256 string `json:\"sc:sha256,omitempty\"` ContainedIn FileResource `json:\"containedIn,omitempty\"` } func NewFileObject func NewFileObject() *FileObject type FileResource Type used to group data resource objects together. type FileResource struct { FileObject *FileObject FileSet *FileSet } func NewFileResource func NewFileResource() *FileResource type FileSet type FileSet struct { NType string `json:\"@type\"` ContainedIn FileResource `json:\"containedIn\"` Includes string `json:\"includes,omitempty\"` Excludes string `json:\"excludes,omitempty\"` } type Format type Format struct{} type JSON type JSON string type RecordSet type RecordSet struct { NType string `json:\"@type\"` Field []Field `json:\"field\"` Key []string `json:\"key,omitempty\"` Data []JSON `json:\"data,omitempty\"` Examples []JSON `json:\"examples,omitempty\"` Source Source `json:\"-\"` } func NewRecordSet func NewRecordSet() *RecordSet type Source Type used to group data sources. type Source struct { DataSource *DataSource FileObject *FileObject FileSet *FileSet RecordSet *RecordSet } func NewSource func NewSource() *Source type Split type Split struct { TrainSplit string TestSplit string ValidationSplit string } func NewSplit func NewSplit() *Split type Transform type Transform struct { Delimiter string Regex string JsonQuery string } func NewTransform func NewTransform() *Transform","title":"types"},{"location":"godoc/croissant-types/#croissant","text":"import \"github.com/b13rg/croissant-go/pkg/croissant\" Croissant spec filetypes and relations.","title":"croissant"},{"location":"godoc/croissant-types/#index","text":"Variables type ContentExtractionEnumeration func NewContentExtractionEnumeration() *ContentExtractionEnumeration type DataSet func NewDataSet() *DataSet func NewFileSet() *DataSet type DataSource func NewDataSource() *DataSource type DataType func NewDataType() *DataType type Extract func NewExtract() *Extract type Field func NewField() *Field type FileObject func NewFileObject() *FileObject type FileResource func NewFileResource() *FileResource type FileSet type Format type JSON type RecordSet func NewRecordSet() *RecordSet type Source func NewSource() *Source type Split func NewSplit() *Split type Transform func NewTransform() *Transform","title":"Index"},{"location":"godoc/croissant-types/#variables","text":"var SuggestedContext = map[string]interface{}{ \"@language\": \"en\", \"@vocab\": \"https://schema.org/\", \"sc\": \"https://schema.org/\", \"cr\": \"http://mlcommons.org/croissant/\", \"rai\": \"http://mlcommons.org/croissant/RAI/\", \"dct\": \"http://purl.org/dc/terms/\", \"citeAs\": \"cr:citeAs\", \"column\": \"cr:column\", \"conformsTo\": \"dct:conformsTo\", \"data\": map[string]interface{}{ \"@id\": \"cr:data\", \"@type\": \"@json\", }, \"dataType\": map[string]interface{}{ \"@id\": \"cr:dataType\", \"@type\": \"@vocab\", }, \"examples\": map[string]interface{}{ \"@id\": \"cr:examples\", \"@type\": \"@json\", }, \"extract\": \"cr:extract\", \"field\": \"cr:field\", \"fileProperty\": \"cr:fileProperty\", \"fileObject\": \"cr:fileObject\", \"fileSet\": \"cr:fileSet\", \"format\": \"cr:format\", \"includes\": \"cr:includes\", \"isLiveDataset\": \"cr:isLiveDataset\", \"jsonPath\": \"cr:jsonPath\", \"key\": \"cr:key\", \"md5\": \"cr:md5\", \"parentField\": \"cr:parentField\", \"path\": \"cr:path\", \"recordSet\": \"cr:recordSet\", \"references\": \"cr:references\", \"regex\": \"cr:regex\", \"repeated\": \"cr:repeated\", \"replace\": \"cr:replace\", \"separator\": \"cr:separator\", \"source\": \"cr:source\", \"subField\": \"cr:subField\", \"transform\": \"cr:transform\", }","title":"Variables"},{"location":"godoc/croissant-types/#type-contentextractionenumeration","text":"type ContentExtractionEnumeration struct { FullPath string Filename string Content string Lines string LineNumbers string }","title":"type ContentExtractionEnumeration"},{"location":"godoc/croissant-types/#func-newcontentextractionenumeration","text":"func NewContentExtractionEnumeration() *ContentExtractionEnumeration","title":"func NewContentExtractionEnumeration"},{"location":"godoc/croissant-types/#type-dataset","text":"type DataSet struct { Context map[string]interface{} `json:\"@context\"` NType string `json:\"@type\"` ConformsTo string `json:\"dct:conformsTo\"` Description string `json:\"description\"` License []string `json:\"license\"` Name string `json:\"name\"` URL string `json:\"url\"` Creator []string `json:\"creator\"` DatePublished string `json:\"datePublished\"` Keywords []string `json:\"keywords,omitempty\"` Publisher []string `json:\"publisher,omitempty\"` Version string `json:\"version,omitempty\"` DateCreated string `json:\"dateCreated,omitempty\"` DateModified string `json:\"dateModified,omitempty\"` SameAs []string `json:\"sameAs,omitempty\"` SdLicense []string `json:\"sdLicense,omitempty\"` InLanguage []string `json:\"inLanguage,omitempty\"` Distribution []FileResource `json:\"distribution,omitempty\"` IsLiveDataset bool `json:\"isLiveDataset,omitempty\"` CiteAs string `json:\"citeAs,omitempty\"` }","title":"type DataSet"},{"location":"godoc/croissant-types/#func-newdataset","text":"func NewDataSet() *DataSet","title":"func NewDataSet"},{"location":"godoc/croissant-types/#func-newfileset","text":"func NewFileSet() *DataSet","title":"func NewFileSet"},{"location":"godoc/croissant-types/#type-datasource","text":"type DataSource struct { NType string `json:\"@type\"` FileObject *FileObject `json:\"fileObject\"` FileSet *FileSet `json:\"fileSet\"` RecordSet *RecordSet `json:\"recordSet\"` Extract Extract `json:\"extract\"` Transform Transform `json:\"transform\"` Format Format `json:\"format\"` }","title":"type DataSource"},{"location":"godoc/croissant-types/#func-newdatasource","text":"func NewDataSource() *DataSource","title":"func NewDataSource"},{"location":"godoc/croissant-types/#type-datatype","text":"type DataType struct { // MIME type DataType string }","title":"type DataType"},{"location":"godoc/croissant-types/#func-newdatatype","text":"func NewDataType() *DataType","title":"func NewDataType"},{"location":"godoc/croissant-types/#type-extract","text":"type Extract struct { FileProperty ContentExtractionEnumeration Column string `json:\"column\"` JsonPath string `json:\"jsonPath\"` }","title":"type Extract"},{"location":"godoc/croissant-types/#func-newextract","text":"func NewExtract() *Extract","title":"func NewExtract"},{"location":"godoc/croissant-types/#type-field","text":"type Field struct { NType string `json:\"@type\"` Source Source `json:\"source\"` DataType DataType `json:\"dataType\"` Repeated bool `json:\"repeated,omitempty\"` References []*Field `json:\"references,omitempty\"` SubField []*Field `json:\"subField,omitempty\"` ParentField []*Field `json:\"parentField,omitempty\"` EquivalentProperty string `json:\"equivalentProperty,omitempty\"` }","title":"type Field"},{"location":"godoc/croissant-types/#func-newfield","text":"func NewField() *Field","title":"func NewField"},{"location":"godoc/croissant-types/#type-fileobject","text":"type FileObject struct { NType string `json:\"@type\"` Name string `json:\"sc:name\"` ContentURL string `json:\"sc:contentUrl\"` ContentSize string `json:\"sc:contentSize\"` EncodingFormat string `json:\"sc:encodingFormat\"` Sha256 string `json:\"sc:sha256,omitempty\"` ContainedIn FileResource `json:\"containedIn,omitempty\"` }","title":"type FileObject"},{"location":"godoc/croissant-types/#func-newfileobject","text":"func NewFileObject() *FileObject","title":"func NewFileObject"},{"location":"godoc/croissant-types/#type-fileresource","text":"Type used to group data resource objects together. type FileResource struct { FileObject *FileObject FileSet *FileSet }","title":"type FileResource"},{"location":"godoc/croissant-types/#func-newfileresource","text":"func NewFileResource() *FileResource","title":"func NewFileResource"},{"location":"godoc/croissant-types/#type-fileset","text":"type FileSet struct { NType string `json:\"@type\"` ContainedIn FileResource `json:\"containedIn\"` Includes string `json:\"includes,omitempty\"` Excludes string `json:\"excludes,omitempty\"` }","title":"type FileSet"},{"location":"godoc/croissant-types/#type-format","text":"type Format struct{}","title":"type Format"},{"location":"godoc/croissant-types/#type-json","text":"type JSON string","title":"type JSON"},{"location":"godoc/croissant-types/#type-recordset","text":"type RecordSet struct { NType string `json:\"@type\"` Field []Field `json:\"field\"` Key []string `json:\"key,omitempty\"` Data []JSON `json:\"data,omitempty\"` Examples []JSON `json:\"examples,omitempty\"` Source Source `json:\"-\"` }","title":"type RecordSet"},{"location":"godoc/croissant-types/#func-newrecordset","text":"func NewRecordSet() *RecordSet","title":"func NewRecordSet"},{"location":"godoc/croissant-types/#type-source","text":"Type used to group data sources. type Source struct { DataSource *DataSource FileObject *FileObject FileSet *FileSet RecordSet *RecordSet }","title":"type Source"},{"location":"godoc/croissant-types/#func-newsource","text":"func NewSource() *Source","title":"func NewSource"},{"location":"godoc/croissant-types/#type-split","text":"type Split struct { TrainSplit string TestSplit string ValidationSplit string }","title":"type Split"},{"location":"godoc/croissant-types/#func-newsplit","text":"func NewSplit() *Split","title":"func NewSplit"},{"location":"godoc/croissant-types/#type-transform","text":"type Transform struct { Delimiter string Regex string JsonQuery string }","title":"type Transform"},{"location":"godoc/croissant-types/#func-newtransform","text":"func NewTransform() *Transform","title":"func NewTransform"}]}