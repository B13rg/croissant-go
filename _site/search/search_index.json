{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"README-repo/","text":"\ud83e\udd50 croissant-go A template repo for a Golang Project. Table of Contents - [\ud83e\udd50 croissant-go](#-croissant-go) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [Links](#links) - [Other Docs](#other-docs) - [History](#history) - [Alternatives](#alternatives) - [Development](#development) - [Setup](#setup) - [Tests](#tests) - [Build Troubleshooting](#build-troubleshooting) - [Contributing](#contributing) - [License](#license) Key Features Technical Overview Installation Getting Started Configuration Deployment Documentation and Additional Resources Links Other Docs History Alternatives Development Setup Tests Build Troubleshooting Contributing License","title":"Repo Readme"},{"location":"README-repo/#croissant-go","text":"A template repo for a Golang Project. Table of Contents - [\ud83e\udd50 croissant-go](#-croissant-go) - [Key Features](#key-features) - [Technical Overview](#technical-overview) - [Installation](#installation) - [Getting Started](#getting-started) - [Configuration](#configuration) - [Deployment](#deployment) - [Documentation and Additional Resources](#documentation-and-additional-resources) - [Links](#links) - [Other Docs](#other-docs) - [History](#history) - [Alternatives](#alternatives) - [Development](#development) - [Setup](#setup) - [Tests](#tests) - [Build Troubleshooting](#build-troubleshooting) - [Contributing](#contributing) - [License](#license)","title":"\ud83e\udd50 croissant-go"},{"location":"README-repo/#key-features","text":"","title":"Key Features"},{"location":"README-repo/#technical-overview","text":"","title":"Technical Overview"},{"location":"README-repo/#installation","text":"","title":"Installation"},{"location":"README-repo/#getting-started","text":"","title":"Getting Started"},{"location":"README-repo/#configuration","text":"","title":"Configuration"},{"location":"README-repo/#deployment","text":"","title":"Deployment"},{"location":"README-repo/#documentation-and-additional-resources","text":"","title":"Documentation and Additional Resources"},{"location":"README-repo/#links","text":"","title":"Links"},{"location":"README-repo/#other-docs","text":"","title":"Other Docs"},{"location":"README-repo/#history","text":"","title":"History"},{"location":"README-repo/#alternatives","text":"","title":"Alternatives"},{"location":"README-repo/#development","text":"","title":"Development"},{"location":"README-repo/#setup","text":"","title":"Setup"},{"location":"README-repo/#tests","text":"","title":"Tests"},{"location":"README-repo/#build-troubleshooting","text":"","title":"Build Troubleshooting"},{"location":"README-repo/#contributing","text":"","title":"Contributing"},{"location":"README-repo/#license","text":"","title":"License"},{"location":"cmd/croissant/","text":"croissant A cli for Croissant files Synopsis A simple cli for interacting with \ud83e\udd50 Croissant dataset files. Options --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for croissant -L, --loglevel string set zerolog log level (default \"info\") --profiledir string directory to write pprof profile data to SEE ALSO croissant version - Get version Auto generated by spf13/cobra on 5-Aug-2025","title":"root"},{"location":"cmd/croissant/#croissant","text":"A cli for Croissant files","title":"croissant"},{"location":"cmd/croissant/#synopsis","text":"A simple cli for interacting with \ud83e\udd50 Croissant dataset files.","title":"Synopsis"},{"location":"cmd/croissant/#options","text":"--color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -h, --help help for croissant -L, --loglevel string set zerolog log level (default \"info\") --profiledir string directory to write pprof profile data to","title":"Options"},{"location":"cmd/croissant/#see-also","text":"croissant version - Get version","title":"SEE ALSO"},{"location":"cmd/croissant/#auto-generated-by-spf13cobra-on-5-aug-2025","text":"","title":"Auto generated by spf13/cobra on 5-Aug-2025"},{"location":"cmd/croissant_version/","text":"croissant version Get version Synopsis Get the current version of tool croissant version [flags] Options -h, --help help for version Options inherited from parent commands --color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -L, --loglevel string set zerolog log level (default \"info\") --profiledir string directory to write pprof profile data to SEE ALSO croissant - A cli for Croissant files Auto generated by spf13/cobra on 5-Aug-2025","title":"version"},{"location":"cmd/croissant_version/#croissant-version","text":"Get version","title":"croissant version"},{"location":"cmd/croissant_version/#synopsis","text":"Get the current version of tool croissant version [flags]","title":"Synopsis"},{"location":"cmd/croissant_version/#options","text":"-h, --help help for version","title":"Options"},{"location":"cmd/croissant_version/#options-inherited-from-parent-commands","text":"--color enable colorized output (default true) --debug log additional information about what the tool is doing. Overrides --loglevel -L, --loglevel string set zerolog log level (default \"info\") --profiledir string directory to write pprof profile data to","title":"Options inherited from parent commands"},{"location":"cmd/croissant_version/#see-also","text":"croissant - A cli for Croissant files","title":"SEE ALSO"},{"location":"cmd/croissant_version/#auto-generated-by-spf13cobra-on-5-aug-2025","text":"","title":"Auto generated by spf13/cobra on 5-Aug-2025"},{"location":"godoc/croissant-cmd/","text":"cmd import \"github.com/b13rg/croissant-go/cmd\" Output package version info Index Variables func Colorize(input interface{}, colorNum int, disabled bool) string func ConfigureLogger(debug bool) func Execute(ver string) func InitConfig() func ProfilingFinalizer() func ProfilingInitializer() func SetupLogger(enableColor bool) zerolog.Logger type CmdRootOptions type Stamp Variables RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"croissant\", Short: \"A cli for Croissant files\", Long: `A simple cli for interacting with \ud83e\udd50 Croissant dataset files.`, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Get version\", Long: `Get the current version of tool`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, } func Colorize func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function. func ConfigureLogger func ConfigureLogger(debug bool) func Execute func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd. func InitConfig func InitConfig() InitConfig reads in config file and ENV variables if set. func ProfilingFinalizer func ProfilingFinalizer() Stop profiling and write cpu and memory profiling files if configured. func ProfilingInitializer func ProfilingInitializer() Sets up program profiling. func SetupLogger func SetupLogger(enableColor bool) zerolog.Logger Configure zerolog with some defaults and cleanup error formatting. type CmdRootOptions Default options that are available to all commands. type CmdRootOptions struct { // log more information about what the tool is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // Profiling output directory. Only captured if set. ProfilingDir string // CPU profiling output file handle. ProfilingCPUFile *os.File } var RootConfig CmdRootOptions type Stamp type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"version"},{"location":"godoc/croissant-cmd/#cmd","text":"import \"github.com/b13rg/croissant-go/cmd\" Output package version info","title":"cmd"},{"location":"godoc/croissant-cmd/#index","text":"Variables func Colorize(input interface{}, colorNum int, disabled bool) string func ConfigureLogger(debug bool) func Execute(ver string) func InitConfig() func ProfilingFinalizer() func ProfilingInitializer() func SetupLogger(enableColor bool) zerolog.Logger type CmdRootOptions type Stamp","title":"Index"},{"location":"godoc/croissant-cmd/#variables","text":"RootCmd represents the base command when called without any subcommands. var RootCmd = &cobra.Command{ Use: \"croissant\", Short: \"A cli for Croissant files\", Long: `A simple cli for interacting with \ud83e\udd50 Croissant dataset files.`, } Print out versions of packages in use. Chore() - Updated manually. var VersionCmd = &cobra.Command{ Use: \"version\", Short: \"Get version\", Long: `Get the current version of tool`, Run: func(cmd *cobra.Command, args []string) { fmt.Println(RootCmd.Use + \"+ Version: \" + version) info, ok := debug.ReadBuildInfo() if !ok { log.Fatal().Msg(\"could not read build info\") } stamp := retrieveStamp(info) fmt.Printf(\" Built with %s on %s\\n\", stamp.InfoGoCompiler, stamp.InfoBuildTime) fmt.Printf(\" VCS revision: %s\\n\", stamp.VCSRevision) fmt.Printf(\" Go version %s, GOOS %s, GOARCH %s\\n\", info.GoVersion, stamp.InfoGOOS, stamp.InfoGOARCH) fmt.Print(\" Dependencies:\\n\") for _, mod := range retrieveDepends(info) { fmt.Printf(\" %s\\n\", mod) } }, }","title":"Variables"},{"location":"godoc/croissant-cmd/#func-colorize","text":"func Colorize(input interface{}, colorNum int, disabled bool) string Colorize function from zerolog console.go file to replicate their coloring functionality. Source: https://github.com/rs/zerolog/blob/a21d6107dcda23e36bc5cfd00ce8fdbe8f3ddc23/console.go#L389 Replicated here because it's a private function.","title":"func Colorize"},{"location":"godoc/croissant-cmd/#func-configurelogger","text":"func ConfigureLogger(debug bool)","title":"func ConfigureLogger"},{"location":"godoc/croissant-cmd/#func-execute","text":"func Execute(ver string) Execute adds all child commands to the root command sets flags appropriately. This is called by main.main(). It only needs to happen once to the rootCmd.","title":"func Execute"},{"location":"godoc/croissant-cmd/#func-initconfig","text":"func InitConfig() InitConfig reads in config file and ENV variables if set.","title":"func InitConfig"},{"location":"godoc/croissant-cmd/#func-profilingfinalizer","text":"func ProfilingFinalizer() Stop profiling and write cpu and memory profiling files if configured.","title":"func ProfilingFinalizer"},{"location":"godoc/croissant-cmd/#func-profilinginitializer","text":"func ProfilingInitializer() Sets up program profiling.","title":"func ProfilingInitializer"},{"location":"godoc/croissant-cmd/#func-setuplogger","text":"func SetupLogger(enableColor bool) zerolog.Logger Configure zerolog with some defaults and cleanup error formatting.","title":"func SetupLogger"},{"location":"godoc/croissant-cmd/#type-cmdrootoptions","text":"Default options that are available to all commands. type CmdRootOptions struct { // log more information about what the tool is doing. Overrides --loglevel Debug bool // set log level LogLevel string // enable colorized output (default true). Set to false to disable\") Color bool // Profiling output directory. Only captured if set. ProfilingDir string // CPU profiling output file handle. ProfilingCPUFile *os.File } var RootConfig CmdRootOptions","title":"type CmdRootOptions"},{"location":"godoc/croissant-cmd/#type-stamp","text":"type Stamp struct { InfoGoVersion string InfoGoCompiler string InfoGOARCH string InfoGOOS string InfoBuildTime string VCSRevision string }","title":"type Stamp"},{"location":"godoc/croissant-types/","text":"croissant import \"github.com/b13rg/croissant-go/pkg/croissant\" Croissant spec filetypes and relations. Index type ContentExtractionEnumeration type DataSet type DataSource type DataType type Extract type Field type FileObject type FileResource type FileSet type Format type JSON type RecordSet type Source type Split type Transform type ContentExtractionEnumeration type ContentExtractionEnumeration struct { FullPath string Filename string Content string Lines string LineNumbers string } type DataSet type DataSet struct { Description string License []string Name string URL string Creator []string DatePublished string Keywords []string Publisher []string Version string DateCreated string DateModified string SameAs []string SdLicense []string InLanguage []string Distribution []FileResource // contains filtered or unexported fields } type DataSource type DataSource struct { FileObject *FileObject FileSet *FileSet RecordSet *RecordSet Extract Extract Transform Transform Format Format } type DataType type DataType struct { // MIME type DataType string } type Extract type Extract struct { FileProperty ContentExtractionEnumeration Column string JsonPath string } type Field type Field struct { Source Source Repeated bool References []*Field SubField []*Field ParentField []*Field EquivalentProperty string } type FileObject type FileObject struct { ContainedIn FileResource } type FileResource type FileResource struct { FileObject *FileObject FileSet *FileSet } type FileSet type FileSet struct { ContainedIn FileResource Includes string Excludes string } type Format type Format struct{} type JSON type JSON string type RecordSet type RecordSet struct { Key []*Field Data []JSON Examples []JSON Source Source } type Source type Source struct { DataSource *DataSource FileObject *FileObject FileSet *FileSet RecordSet *RecordSet } type Split type Split struct { TrainSplit string TestSplit string ValidationSplit string } type Transform type Transform struct { Delimiter string Regex string JsonQuery string }","title":"types"},{"location":"godoc/croissant-types/#croissant","text":"import \"github.com/b13rg/croissant-go/pkg/croissant\" Croissant spec filetypes and relations.","title":"croissant"},{"location":"godoc/croissant-types/#index","text":"type ContentExtractionEnumeration type DataSet type DataSource type DataType type Extract type Field type FileObject type FileResource type FileSet type Format type JSON type RecordSet type Source type Split type Transform","title":"Index"},{"location":"godoc/croissant-types/#type-contentextractionenumeration","text":"type ContentExtractionEnumeration struct { FullPath string Filename string Content string Lines string LineNumbers string }","title":"type ContentExtractionEnumeration"},{"location":"godoc/croissant-types/#type-dataset","text":"type DataSet struct { Description string License []string Name string URL string Creator []string DatePublished string Keywords []string Publisher []string Version string DateCreated string DateModified string SameAs []string SdLicense []string InLanguage []string Distribution []FileResource // contains filtered or unexported fields }","title":"type DataSet"},{"location":"godoc/croissant-types/#type-datasource","text":"type DataSource struct { FileObject *FileObject FileSet *FileSet RecordSet *RecordSet Extract Extract Transform Transform Format Format }","title":"type DataSource"},{"location":"godoc/croissant-types/#type-datatype","text":"type DataType struct { // MIME type DataType string }","title":"type DataType"},{"location":"godoc/croissant-types/#type-extract","text":"type Extract struct { FileProperty ContentExtractionEnumeration Column string JsonPath string }","title":"type Extract"},{"location":"godoc/croissant-types/#type-field","text":"type Field struct { Source Source Repeated bool References []*Field SubField []*Field ParentField []*Field EquivalentProperty string }","title":"type Field"},{"location":"godoc/croissant-types/#type-fileobject","text":"type FileObject struct { ContainedIn FileResource }","title":"type FileObject"},{"location":"godoc/croissant-types/#type-fileresource","text":"type FileResource struct { FileObject *FileObject FileSet *FileSet }","title":"type FileResource"},{"location":"godoc/croissant-types/#type-fileset","text":"type FileSet struct { ContainedIn FileResource Includes string Excludes string }","title":"type FileSet"},{"location":"godoc/croissant-types/#type-format","text":"type Format struct{}","title":"type Format"},{"location":"godoc/croissant-types/#type-json","text":"type JSON string","title":"type JSON"},{"location":"godoc/croissant-types/#type-recordset","text":"type RecordSet struct { Key []*Field Data []JSON Examples []JSON Source Source }","title":"type RecordSet"},{"location":"godoc/croissant-types/#type-source","text":"type Source struct { DataSource *DataSource FileObject *FileObject FileSet *FileSet RecordSet *RecordSet }","title":"type Source"},{"location":"godoc/croissant-types/#type-split","text":"type Split struct { TrainSplit string TestSplit string ValidationSplit string }","title":"type Split"},{"location":"godoc/croissant-types/#type-transform","text":"type Transform struct { Delimiter string Regex string JsonQuery string }","title":"type Transform"}]}